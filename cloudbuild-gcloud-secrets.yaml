substitutions:
  _CLUSTER_NAME: "mieszkaniownik-prod-cluster"
  _CLUSTER_ZONE: "europe-central2-a"
  _ARTIFACT_REGISTRY: "europe-west3-docker.pkg.dev"
  _REPOSITORY: "mieszkaniownik-repo"
  _SERVICE_NAME: "mieszkaniownik-backend"
  _IMAGE_TAG: "${SHORT_SHA}"
  _HELM_RELEASE_NAME: "mieszkaniownik-backend"
  _NAMESPACE: "production"

options:
  machineType: "E2_HIGHCPU_8"
  logging: CLOUD_LOGGING_ONLY
  dynamicSubstitutions: true

steps:
  - name: "gcr.io/cloud-builders/gcloud"
    id: "get-secrets"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Fetching all backend secrets..."
        DATABASE_URL=$$(gcloud secrets versions access latest --secret=database-url-prod)
        JWT_SECRET=$$(gcloud secrets versions access latest --secret=jwt-secret-prod)
        GOOGLE_CLIENT_ID=$$(gcloud secrets versions access latest --secret=google-client-id-prod)
        GOOGLE_CLIENT_SECRET=$$(gcloud secrets versions access latest --secret=google-client-secret-prod)
        GOOGLE_CALLBACK_URL=$$(gcloud secrets versions access latest --secret=google-callback-url-prod)
        FRONTEND_URL=$$(gcloud secrets versions access latest --secret=frontend-url-prod)
        CORS_ORIGIN=$$(gcloud secrets versions access latest --secret=cors-origin-prod)
        EMAIL_OAUTH_USER=$$(gcloud secrets versions access latest --secret=email-oauth-user-prod)
        EMAIL_OAUTH_CLIENT_ID=$$(gcloud secrets versions access latest --secret=email-oauth-client-id-prod)
        EMAIL_OAUTH_CLIENT_SECRET=$$(gcloud secrets versions access latest --secret=email-oauth-client-secret-prod)
        EMAIL_OAUTH_REFRESH_TOKEN=$$(gcloud secrets versions access latest --secret=email-oauth-refresh-token-prod)
        REDIS_PASSWORD=$$(gcloud secrets versions access latest --secret=redis-password-prod)
        REDIS_HOST=$$(gcloud secrets versions access latest --secret=redis-host-prod)
        GOOGLE_AI_API_KEY=$$(gcloud secrets versions access latest --secret=google-ai-api-key-prod)
        GOOGLE_MAPS_API_KEY=$$(gcloud secrets versions access latest --secret=google-maps-api-key-backend-prod)
        
        # Write all secrets to environment file
        cat > /workspace/backend-secrets.env << EOF
        DATABASE_URL=$$DATABASE_URL
        JWT_SECRET=$$JWT_SECRET
        GOOGLE_CLIENT_ID=$$GOOGLE_CLIENT_ID
        GOOGLE_CLIENT_SECRET=$$GOOGLE_CLIENT_SECRET
        GOOGLE_CALLBACK_URL=$$GOOGLE_CALLBACK_URL
        FRONTEND_URL=$$FRONTEND_URL
        CORS_ORIGIN=$$CORS_ORIGIN
        EMAIL_OAUTH_USER=$$EMAIL_OAUTH_USER
        EMAIL_OAUTH_CLIENT_ID=$$EMAIL_OAUTH_CLIENT_ID
        EMAIL_OAUTH_CLIENT_SECRET=$$EMAIL_OAUTH_CLIENT_SECRET
        EMAIL_OAUTH_REFRESH_TOKEN=$$EMAIL_OAUTH_REFRESH_TOKEN
        REDIS_PASSWORD=$$REDIS_PASSWORD
        REDIS_HOST=$$REDIS_HOST
        GOOGLE_AI_API_KEY=$$GOOGLE_AI_API_KEY
        GOOGLE_MAPS_API_KEY=$$GOOGLE_MAPS_API_KEY
        EOF
        
        echo "All secrets retrieved successfully"

  - name: "node:20-alpine"
    id: "install-and-test"
    entrypoint: "sh"
    args:
      - "-c"
      - |
        pwd
        ls -la
        which npm
        npm --version
        npm ci
        npm run build
    env:
      - "NODE_ENV=test"
    waitFor: ["get-secrets"]

  - name: "gcr.io/cloud-builders/docker"
    id: "build-image"
    args:
      - "build"
      - "-t"
      - "${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:${_IMAGE_TAG}"
      - "-t"
      - "${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:latest"
      - "-t"
      - "${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:${BRANCH_NAME}-latest"
      - "--build-arg"
      - "NODE_ENV=production"
      - "--cache-from"
      - "${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:latest"
      - "."
    waitFor: ["install-and-test"]

  - name: "gcr.io/cloud-builders/docker"
    id: "push-image"
    args:
      - "push"
      - "--all-tags"
      - "${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}"
    waitFor: ["build-image"]

  - name: "gcr.io/cloud-builders/gcloud"
    id: "get-credentials"
    args:
      - "container"
      - "clusters"
      - "get-credentials"
      - "${_CLUSTER_NAME}"
      - "--zone=${_CLUSTER_ZONE}"
      - "--project=$PROJECT_ID"
    waitFor: ["push-image"]

  - name: "gcr.io/$PROJECT_ID/helm"
    id: "helm-deploy"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Debug: Check workspace contents
        echo "Current directory: $(pwd)"
        echo "Workspace contents:"
        ls -la
        echo "Looking for helm-chart-backend:"
        ls -la helm-chart-backend/ || echo "helm-chart-backend not found!"
        
        # Source the secrets file
        source /workspace/backend-secrets.env
        
        helm upgrade --install ${_HELM_RELEASE_NAME} /workspace/helm-chart-backend \
          --namespace ${_NAMESPACE} \
          --create-namespace \
          --set backend.image.repository=${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME} \
          --set backend.image.tag=${_IMAGE_TAG} \
          --set global.imageRegistry="" \
          --set backend.env.DATABASE_URL="$$DATABASE_URL" \
          --set backend.env.JWT_SECRET="$$JWT_SECRET" \
          --set backend.env.GOOGLE_CLIENT_ID="$$GOOGLE_CLIENT_ID" \
          --set backend.env.GOOGLE_CLIENT_SECRET="$$GOOGLE_CLIENT_SECRET" \
          --set backend.env.GOOGLE_CALLBACK_URL="$$GOOGLE_CALLBACK_URL" \
          --set backend.env.FRONTEND_URL="$$FRONTEND_URL" \
          --set backend.env.CORS_ORIGIN="$$CORS_ORIGIN" \
          --set backend.env.EMAIL_OAUTH_USER="$$EMAIL_OAUTH_USER" \
          --set backend.env.EMAIL_OAUTH_CLIENT_ID="$$EMAIL_OAUTH_CLIENT_ID" \
          --set backend.env.EMAIL_OAUTH_CLIENT_SECRET="$$EMAIL_OAUTH_CLIENT_SECRET" \
          --set backend.env.EMAIL_OAUTH_REFRESH_TOKEN="$$EMAIL_OAUTH_REFRESH_TOKEN" \
          --set backend.env.REDIS_PASSWORD="$$REDIS_PASSWORD" \
          --set backend.env.REDIS_HOST="$$REDIS_HOST" \
          --set backend.env.GOOGLE_AI_API_KEY="$$GOOGLE_AI_API_KEY" \
          --set backend.env.GOOGLE_MAPS_API_KEY="$$GOOGLE_MAPS_API_KEY" \
          --values /workspace/helm-chart-backend/values-prod.yaml \
          --wait \
          --timeout 10m \
          --atomic \
          --cleanup-on-fail
    waitFor: ["get-credentials"]

  - name: "gcr.io/cloud-builders/kubectl"
    id: "verify-deployment"
    args:
      - "rollout"
      - "status"
      - "deployment/${_HELM_RELEASE_NAME}"
      - "-n"
      - "${_NAMESPACE}"
      - "--timeout=5m"
    waitFor: ["helm-deploy"]

  - name: "gcr.io/cloud-builders/kubectl"
    id: "smoke-test"
    args:
      - "get"
      - "pods"
      - "-n"
      - "${_NAMESPACE}"
      - "-l"
      - "app.kubernetes.io/name=${_HELM_RELEASE_NAME}"
    waitFor: ["verify-deployment"]

images:
  - "${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:${_IMAGE_TAG}"
  - "${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:latest"
  - "${_ARTIFACT_REGISTRY}/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:${BRANCH_NAME}-latest"

timeout: "1800s"

tags:
  - "mieszkaniownik-backend"
  - "${BRANCH_NAME}"
  - "${_IMAGE_TAG}"