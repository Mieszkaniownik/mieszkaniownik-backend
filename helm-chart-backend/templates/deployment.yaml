{{- if .Values.backend.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mieszkaniownik-backend.fullname" . }}
  labels:
    {{- include "mieszkaniownik-backend.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.backend.replicaCount }}
  {{- end }}
  strategy:
    {{- toYaml .Values.backend.strategy | nindent 4 }}
  revisionHistoryLimit: {{ .Values.backend.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "mieszkaniownik-backend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "mieszkaniownik-backend.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mieszkaniownik-backend.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.postgresql.enabled }}
        - name: wait-for-postgres
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              until nc -z {{ .Release.Name }}-postgresql 5432; do
                echo "Waiting for PostgreSQL..."
                sleep 2
              done
              echo "PostgreSQL is ready!"
        {{- end }}
        {{- if .Values.redis.enabled }}
        - name: wait-for-redis
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              until nc -z {{ .Release.Name }}-redis-master 6379; do
                echo "Waiting for Redis..."
                sleep 2
              done
              echo "Redis is ready!"
        {{- end }}
      containers:
        - name: {{ .Values.backend.name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.global.imageRegistry }}{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          ports:
            - name: {{ .Values.backend.service.name }}
              containerPort: {{ .Values.backend.service.targetPort }}
              protocol: TCP
          
          {{- if .Values.backend.healthChecks.enabled }}
          livenessProbe:
            {{- toYaml .Values.backend.healthChecks.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.backend.healthChecks.readinessProbe | nindent 12 }}
          {{- end }}
          
          env:
            - name: DATABASE_URL
              value: {{ include "mieszkaniownik-backend.databaseUrl" . | quote }}
            - name: REDIS_URL
              value: {{ include "mieszkaniownik-backend.redisUrl" . | quote }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mieszkaniownik-backend.postgresqlSecretName" . }}
                  key: postgres-password
            {{- range $key, $value := .Values.backend.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          
          envFrom:
            {{- if .Values.config }}
            - configMapRef:
                name: {{ include "mieszkaniownik-backend.configName" . }}
            {{- end }}
            - secretRef:
                name: {{ include "mieszkaniownik-backend.appSecretName" . }}
          
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
          
          volumeMounts:
            {{- if .Values.securityContext.readOnlyRootFilesystem }}
            - name: tmp
              mountPath: /tmp
            - name: logs
              mountPath: /app/logs
            {{- end }}
      
      volumes:
        {{- if .Values.securityContext.readOnlyRootFilesystem }}
        - name: tmp
          emptyDir: {}
        - name: logs
          emptyDir: {}
        {{- end }}
      
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}