name: Deploy Backend to Development

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: mieszkaniownik-backend-cluster
  GKE_ZONE: europe-west3-a
  DEPLOYMENT_NAME: mieszkaniownik-backend
  IMAGE: mieszkaniownik-backend
  REGISTRY_HOSTNAME: europe-west3-docker.pkg.dev
  REPOSITORY: mieszkaniownik-backend-repo

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Run type check
        run: npm run build --noEmit

  build-and-deploy:
    name: Build and Deploy to Development
    runs-on: ubuntu-latest
    needs: lint-and-test
    environment: development

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker to use Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY_HOSTNAME }}

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --zone ${{ env.GKE_ZONE }} \
            --project ${{ env.PROJECT_ID }}

      - name: Generate Prisma Client
        run: |
          npm ci
          npx prisma generate

      - name: Extract version
        id: version
        run: |
          VERSION="dev-${GITHUB_SHA::8}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build Docker image
        run: |
          docker build \
            --tag "${{ env.REGISTRY_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.version.outputs.VERSION }}" \
            --tag "${{ env.REGISTRY_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:dev-latest" \
            --build-arg NODE_ENV=development \
            .

      - name: Push Docker image to Artifact Registry
        run: |
          docker push "${{ env.REGISTRY_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ steps.version.outputs.VERSION }}"
          docker push "${{ env.REGISTRY_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:dev-latest"

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: "3.13.0"

      - name: Deploy to GKE with Helm
        run: |
          helm upgrade --install ${{ env.DEPLOYMENT_NAME }} ./helm-chart-backend \
            --namespace development \
            --create-namespace \
            --values ./helm-chart-backend/values.yaml \
            --values ./helm-chart-backend/values-dev.yaml \
            --set image.repository="${{ env.REGISTRY_HOSTNAME }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}" \
            --set image.tag="${{ steps.version.outputs.VERSION }}" \
            --set postgresql.auth.password="${{ secrets.DB_PASSWORD }}" \
            --set secrets.jwtSecret="${{ secrets.JWT_SECRET }}" \
            --set secrets.googleClientId="${{ secrets.GOOGLE_CLIENT_ID }}" \
            --set secrets.googleClientSecret="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --wait \
            --timeout 10m

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n development --timeout=5m
          kubectl get services -n development
          kubectl get ingress -n development

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Wait for service to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/${{ env.DEPLOYMENT_NAME }} -n development

          # Get the service URL
          echo "Checking health endpoint..."
          # Add actual health check when ingress is ready
          # INGRESS_IP=$(kubectl get ingress -n development -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
          # curl -f http://${INGRESS_IP}/health || exit 1
